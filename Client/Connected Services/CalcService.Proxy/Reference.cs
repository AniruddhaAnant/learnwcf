//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.CalcService.Proxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcService.Proxy.ICalc")]
    public interface ICalc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Add", ReplyAction="http://tempuri.org/ICalc/AddResponse")]
        double Add(double firstNumber, double secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Add", ReplyAction="http://tempuri.org/ICalc/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double firstNumber, double secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Substract", ReplyAction="http://tempuri.org/ICalc/SubstractResponse")]
        double Substract(double firstNumber, double secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Substract", ReplyAction="http://tempuri.org/ICalc/SubstractResponse")]
        System.Threading.Tasks.Task<double> SubstractAsync(double firstNumber, double secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Multiply", ReplyAction="http://tempuri.org/ICalc/MultiplyResponse")]
        double Multiply(double firstNumber, double secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Multiply", ReplyAction="http://tempuri.org/ICalc/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double firstNumber, double secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Divide", ReplyAction="http://tempuri.org/ICalc/DivideResponse")]
        double Divide(double firstNumber, double secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Divide", ReplyAction="http://tempuri.org/ICalc/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double firstNumber, double secondNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcChannel : Client.CalcService.Proxy.ICalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcClient : System.ServiceModel.ClientBase<Client.CalcService.Proxy.ICalc>, Client.CalcService.Proxy.ICalc {
        
        public CalcClient() {
        }
        
        public CalcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double firstNumber, double secondNumber) {
            return base.Channel.Add(firstNumber, secondNumber);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double firstNumber, double secondNumber) {
            return base.Channel.AddAsync(firstNumber, secondNumber);
        }
        
        public double Substract(double firstNumber, double secondNumber) {
            return base.Channel.Substract(firstNumber, secondNumber);
        }
        
        public System.Threading.Tasks.Task<double> SubstractAsync(double firstNumber, double secondNumber) {
            return base.Channel.SubstractAsync(firstNumber, secondNumber);
        }
        
        public double Multiply(double firstNumber, double secondNumber) {
            return base.Channel.Multiply(firstNumber, secondNumber);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double firstNumber, double secondNumber) {
            return base.Channel.MultiplyAsync(firstNumber, secondNumber);
        }
        
        public double Divide(double firstNumber, double secondNumber) {
            return base.Channel.Divide(firstNumber, secondNumber);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double firstNumber, double secondNumber) {
            return base.Channel.DivideAsync(firstNumber, secondNumber);
        }
    }
}
